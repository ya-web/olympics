services:
  django:
    image: tixidest/django:1.1-swarm
    ports:
      - "8000:8000"
    env_file:
      - .env
    secrets:
      - django_secret_key
      - postgres_user
      - postgres_password
      - postgres_db
    deploy:
      replicas: 1 #  more replicas on production, use Docker Swarm for scaling the service
      restart_policy:
        condition: on-failure # Restart on failure
        delay: 5s
        max_attempts: 3
        window: 120s
    labels:
      - "service=django"
    depends_on:
      - postgres
    networks:
      - frontend_network
      - backend_network

  postgres:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]
    networks:
      - backend_network

  frontend:
    image: react-frontend:latest
    ports:
      - "3000:8080"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    labels:
      - "service=frontend"
    networks:
      - frontend_network

secrets:
  django_secret_key:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true
  postgres_db:
    external: true

volumes:
  postgres_data:

networks:
  frontend_network:
    driver: overlay
  backend_network:
    driver: overlay
